// You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. 
// If a string is longer than the other, append the additional letters onto the end of the merged string. Return the merged string.

var mergeAlternately = function(word1, word2) {
  let l = Math.max(word1.length, word2.length);
  let arr = [];
  for (let i = 0; i < l; i++) {
    arr.push(word1[i])
    arr.push(word2[i])
  }
  return arr.join("");
};

// console.log(mergeAlternately("abc", "pqr"))
// console.log(mergeAlternately("ab", "pqrs"))
// console.log(mergeAlternately("abcd", "pq"))
// console.log(mergeAlternately("abcd", ""))
// console.log(mergeAlternately("", ""))

// You are given two strings s and t.
// String t is generated by random shuffling string s and then add one more letter at a random position.
// Return the letter that was added to t.

var findTheDifference = function(s, t) {
    let a = s.split("").sort()
    let b = t.split("").sort()
    
    for (let i = 0; i < b.length; i++) {
      if (a[i] !== b[i]) {
        return b[i]
      }
    }
};

// console.log(findTheDifference("abcd", "abcde"));
// console.log(findTheDifference("ymbgaraibkfmvocpizdydugvalagaivdbfsfbepeyccqfepzvtpyxtbadkhmwmoswrcxnargtlswqemafandgkmydtimuzvjwxvlfwlhvkrgcsithaqlcvrihrwqkpjdhgfgreqoxzfvhjzojhghfwbvpfzectwwhexthbsndovxejsntmjihchaotbgcysfdaojkjldprwyrnischrgmtvjcorypvopfmegizfkvudubnejzfqffvgdoxohuinkyygbdzmshvyqyhsozwvlhevfepdvafgkqpkmcsikfyxczcovrmwqxxbnhfzcjjcpgzjjfateajnnvlbwhyppdleahgaypxidkpwmfqwqyofwdqgxhjaxvyrzupfwesmxbjszolgwqvfiozofncbohduqgiswuiyddmwlwubetyaummenkdfptjczxemryuotrrymrfdxtrebpbjtpnuhsbnovhectpjhfhahbqrfbyxggobsweefcwxpqsspyssrmdhuelkkvyjxswjwofngpwfxvknkjviiavorwyfzlnktmfwxkvwkrwdcxjfzikdyswsuxegmhtnxjraqrdchaauazfhtklxsksbhwgjphgbasfnlwqwukprgvihntsyymdrfovaszjywuqygpvjtvlsvvqbvzsmgweiayhlubnbsitvfxawhfmfiatxvqrcwjshvovxknnxnyyfexqycrlyksderlqarqhkxyaqwlwoqcribumrqjtelhwdvaiysgjlvksrfvjlcaiwrirtkkxbwgicyhvakxgdjwnwmubkiazdjkfmotglclqndqjxethoutvjchjbkoasnnfbgrnycucfpeovruguzumgmgddqwjgdvaujhyqsqtoexmnfuluaqbxoofvotvfoiexbnprrxptchmlctzgqtkivsilwgwgvpidpvasurraqfkcmxhdapjrlrnkbklwkrvoaziznlpor",
//  "qhxepbshlrhoecdaodgpousbzfcqjxulatciapuftffahhlmxbufgjuxstfjvljybfxnenlacmjqoymvamphpxnolwijwcecgwbcjhgdybfffwoygikvoecdggplfohemfypxfsvdrseyhmvkoovxhdvoavsqqbrsqrkqhbtmgwaurgisloqjixfwfvwtszcxwktkwesaxsmhsvlitegrlzkvfqoiiwxbzskzoewbkxtphapavbyvhzvgrrfriddnsrftfowhdanvhjvurhljmpxvpddxmzfgwwpkjrfgqptrmumoemhfpojnxzwlrxkcafvbhlwrapubhveattfifsmiounhqusvhywnxhwrgamgnesxmzliyzisqrwvkiyderyotxhwspqrrkeczjysfujvovsfcfouykcqyjoobfdgnlswfzjmyucaxuaslzwfnetekymrwbvponiaojdqnbmboldvvitamntwnyaeppjaohwkrisrlrgwcjqqgxeqerjrbapfzurcwxhcwzugcgnirkkrxdthtbmdqgvqxilllrsbwjhwqszrjtzyetwubdrlyakzxcveufvhqugyawvkivwonvmrgnchkzdysngqdibhkyboyftxcvvjoggecjsajbuqkjjxfvynrjsnvtfvgpgveycxidhhfauvjovmnbqgoxsafknluyimkczykwdgvqwlvvgdmufxdypwnajkncoynqticfetcdafvtqszuwfmrdggifokwmkgzuxnhncmnsstffqpqbplypapctctfhqpihavligbrutxmmygiyaklqtakdidvnvrjfteazeqmbgklrgrorudayokxptswwkcircwuhcavhdparjfkjypkyxhbgwxbkvpvrtzjaetahmxevmkhdfyidhrdeejapfbafwmdqjqszwnwzgclitdhlnkaiyldwkwwzvhyorgbysyjbxsspnjdewjxbhpsvj"));


// Given a string word to which you can insert letters "a", "b" or "c" anywhere and any number of times, return the minimum number of letters that must be inserted so 
// that word becomes valid. A string is called valid if it can be formed by concatenating the string "abc" several times.

var addMinimum = function(word) {
    let count = 0
    
    for (let i = 0; i < word.length; i++) {
      if (word[i] === "a") {
        if (word[i+1] == 'b' && word[i+2] === "c") i += 2; 
        else if (word[i+1] === "b" || word[i+1] === "c") {
          ++i
          ++count
        } else count += 2
      } else if (word[i] === "b") {
        ++count
        if (word[i+1] === "c") {
          i++
        } else ++count
      } else count += 2
    }
    return count
};

// console.log(addMinimum("b"));
// console.log(addMinimum("aaa"));
// console.log(addMinimum("abc"));
// console.log(addMinimum("aaaabb"));
// console.log(addMinimum("aaaaac"));

// Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.

var repeatedSubstringPattern = function(s) {
    let len = s.length;

    for (let i = 1; i <= Math.floor(len / 2); i++) {
        if (len % i === 0 && s.slice(0, i).repeat(len / i) === s) {
            return true;
        }
    }

    return false;
};

// console.log(repeatedSubstringPattern("abab"));
// console.log(repeatedSubstringPattern("aba"));

// Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

var moveZeroes = function(nums) {
  let len = nums.length
    for (let i = 0; i < len; i++) {
      if (nums[i] === 0) {
        nums.splice(i, 1)
        i--
      } else
      if (!nums[i]) {
        nums.push(0)
      }
    }
    return nums
};

// console.log(moveZeroes([0,1,0,3,12]));
// console.log(moveZeroes([0,0,0,0,0]));
// console.log(moveZeroes([0,0,1]));
// console.log(moveZeroes([1]));

// You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. 
// The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
// Increment the large integer by one and return the resulting array of digits.

var plusOne = function(digits) {
  let arr = (BigInt(digits.join("")) + 1n).toString().split("").map(item => +item)
  return arr
};

console.log(plusOne([1,2,3]));
console.log(plusOne([4,3,2,1]));
console.log(plusOne([9]));
console.log(plusOne([6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]));

